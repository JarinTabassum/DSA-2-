PROBLEM 01.
Write a function print_odd using divide-and-conquer algorithm to print the odd numbers of an array of n integers.
#include<iostream>
using namespace std;
int print_odd(int arr[],int start,int end){
    if(start==end){ //same index of start and end means one element
    if(arr[start]%2!=0) return 1; //if that one element is odd return 1
    else return 0;
    }
    else{
        int mid=(start+end)/2; //we will keep dividing until we reach to one element
        int c1=print_odd(arr,start,mid); //left part
        int c2=print_odd(arr,mid+1,end); //right part
        return c1+c2; //combined part
    }
}
int main(){
    int n;
    cout<<"Enter a number:";
    cin>>n;
    int arr[n];
    cout<<"Enter the number of the elements:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int c=print_odd(arr,0,n-1);
    cout<<"Odd count:"<<c<<endl;
}


PROBLEM 02.
Write a function calc_sum using divide-and-conquer algorithm to calculate the sum of an array of n integers. 
int calc_sum(int arr[],int start,int end){
    if(start==end){ //same index of start and end means one element
    return arr[start]; //just keep repeating one element to the other by returning
    }


PROBLEM 03.
Write a function calc_sum using divide-and-conquer algorithm to calculate the sum of the even numbers of an array of n integers. 
int calc_sum(int arr[],int start,int end){
    if(start==end){ //same index of start and end means one element
    if(arr[start]%2==0) return arr[start]; //until one element is left, if the element is even,return that element
    else return 0;
    }


PROBLEM 04. X^Y
Write a program that takes X and Y as input and calculates the value of X^Y using divide and conquer and prints it.
sample input   sample output
3 7            2187
#include<iostream>
using namespace std;
int power(int a,int b){
    if (b==0) return 1; //3^0=1
    if(b==1) return a; //3^1=3
    else{
        int p=power(a,b/2); //if a=3,b=6 then power(3,3) as 6/2=3
        if(b%2==0) return p*p; //if 6 is even return 3^3*3^3
        else return p*p*a; 
    }
    /*how it works:
    3^25 = 3^12 x 3^12 x 3 (25/2=12.5)
    3^12 = 3^6 x 3^6
    3^6 = 3^3 x 3^3
    3^3 = 3^1 x 3^1 x 3
    3^1= 3^0 x 3^0 x 3
    */
}
int main(){
    int a,b;
    cout<<"Enter a and b:";
    cin>>a>>b;
    int p=power(a,b);
    cout<<a<<" ^ "<<b<<" is:"<<p;
}


//PROBLEM 05. Find the max and min element of an array.
#include<iostream>
#include<cmath>
using namespace std;
struct Pair{
    int maximum,minimum;
};
Pair max_min(int arr[],int start,int end){
    if(start==end) return {arr[start],arr[start]};
    //we return pair like this {}
    //as one element so it is both maximum and minimum
    else{
        int mid=(start+end)/2;
        Pair left=max_min(arr,start,mid); //left side max,min
        Pair right=max_min(arr,mid+1,end); //right side max,min
        int Max=max(left.maximum,right.maximum); //left max > right max? 
        int Min=min(left.minimum,right.minimum);
        return {Max,Min};
    }
}
int main(){
    int n;
    cout<<"Enter a number:";
    cin>>n;
    int arr[n];
    cout<<"Enter the number of the elements:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
   Pair m=max_min(arr,0,n-1);
   cout<<"max:"<<m.maximum<<" min:"<<m.minimum;
}

//PROBLEM 06. Binary Search
Write a function binary_search that finds the index of an element X in a sorted (ascending) array A of N
integers using divide and conquer. If the element X is not present in the array, return -1. 
#include<iostream>
#include<cmath>
using namespace std;
int binary_search(int arr[],int start,int end,int key){
    while(start<=end){
        int mid=(start+end)/2;
        if(arr[mid]==key) return mid;
        else if(arr[mid]>key){
            return binary_search(arr,start,mid-1,key); //dont forget to return the answer
        }
        else{
            return binary_search(arr,mid+1,end,key);
        }
    }
    return -1;
}
int main(){
    int n;
    cout<<"Enter a number:";
    cin>>n;
    int arr[n];
    cout<<"Enter the number of the elements:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"Enter the number you want to search:";
    int k;
    cin>>k;
    int index=binary_search(arr,0,n-1,k);
    if(index==-1) cout<<"Index isnt found";
    else cout<<index;
}


PROBLEM 07. Merge sort
Write a function merge_sort that sorts an array of N numbers in descending order using merge sort.
Write a main that takes N numbers as input from users into an array, sorts the array in descending order
using the function merge_sort, and prints the sorted array.
#include<iostream>
#include<cmath>
using namespace std;
void merge(int arr[],int start,int mid,int end){
    int n1=mid-start+1; //+1 ensures we are also adding mid here
    int n2=end-mid; //right subarray
    
    int L[n1],R[n2]; //initializing the left and right subarray
    
    for(int i=0;i<n1;i++){ //putting the elements to the subarrays
        L[i]=arr[start+i];
    }
    for(int j=0;j<n2;j++){
        R[j]=arr[mid+1+j]; //as mid belongs to the left subarray thats why we are counting after the mid so +1
    }
    
    int i=0; //left subarray starting index
    int j=0; //right subarray starting index
    int k=start; //merged array starting index
    
    while(i<n1 && j<n2){ //as long as we are comparing every element from 0 to n1 and n2 (the end index)
        if(L[i]<=R[j]){
            arr[k]=L[i];
            i++; 
        }
        else{
            arr[k]=R[j];
            j++;
        }
        k++;
    }
    
    while(i<n1){ //copy the remaining elements(if any) of the lef tsubarray (thats why while not if)
        arr[k]=L[i];
        i++;
        k++;
    }
    
    while(j<n2){ //not j<=n2 because array is 0 based
        arr[k]=R[j];
        j++;
        k++;
    }
}
void mergesort(int arr[],int start,int end){
    if(start<end){ //base case: ensures that there is at least two element to divide and merge
    int mid=(start+end)/2;
    mergesort(arr,start,mid);
    mergesort(arr,mid+1,end);
    merge(arr,start,mid,end);
    }
}
int main(){
    int n;
    cout<<"Enter a number:";
    cin>>n;
    int arr[n];
    cout<<"Enter the array elements:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"Sorted array:";
    mergesort(arr,0,n-1);
     for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}

//PROBLEM 08. Count Inversion [Ref]
If i < j and A[i] > A[j], then the pair (A[i], A[j]) is called an inversion of an array A.
The sequence 8, 4, -1, 2, 5 has 6 inversions: (8,4), (8,-1), (8,2), (8,5), (4,-1), (4,2). The sequence 2, 4, 1,
3, 5 has 3 inversions (2,1), (4,1), (4,3).
Write a function count_inversion that counts the inversions in an array of N numbers using divide and
conquer. Write a main function that takes N numbers from users and uses the function count_inversion
to count the number of inversions and print it.
sample input sample output
5
             8 4 -1 2 5
#inversions: 6
7
1 20 6 4 5 8 4
#inversions: 10
10
1 20 6 4 5 8 4 6 2 5
#inversions: 23
Hint: The solution is similar to merge-sort. Merge two sorted lists into one output list, but while doing
so, we also count the inversion (in line 16 of the merge function in the pseudocode)

#include <iostream>
using namespace std;
int merge_and_count(int arr[],int temp[],int left,int mid,int right){
    int i=left; //initial index of the left sub
    int j=mid+1; //initial index of the right sub
    int k=left; //initial index of the merged sorted array
    int inv_count=0;
    
    while(i<=mid && j<=right){
        if(arr[i]<=arr[j]){ 
            temp[k++]=arr[i++]; //elements arent greater than their later elements, so just put them in the temp array
        }
        else{
            temp[k++]=arr[j++];
            inv_count+=(mid+1-i); //all the remaining elements of left are gretaer than right
        }
    }
    
    while(i<=mid){ //just copy the remaining elements to the temp array
        temp[k++]=arr[i++];
    }
    
    while(j<=right){
        temp[k++]=arr[j++];
    }
    
    for(int i=left;i<=right;i++){
        arr[i]=temp[i]; //now the original array is also sorted
    }
    
    return inv_count;
}
int mergesort_and_count(int arr[],int temp[],int start,int end){
    int mid;
    int inv_count=0;
    if(left<right){
        mid=(start+end)/2;
        inv_count+=mergesort_and_count(arr,temp,start,mid);
        inv_count+=mergesort_and_count(arr,temp,mid+1,end);
        inv_count+=merge_and_count(arr,temp,start,mid,end);
    }
    return inv_count;
}
int count_inversions(int arr[],int n){
    int temp[n];
    return mergesort_and_count(arr,temp,0,n-1);
}
int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter the array elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int inv_count = count_inversions(arr, n);
    cout << "#inversions: " << inv_count << endl;
    return 0;
}


//PROBLEM 09: quick sort
#include<iostream>
#include<cmath>
using namespace std;
void swap(int *a,int *b){
    int temp=*a;
    *a=*b;
    *b=temp;
}
int partition(int arr[],int start,int end){
    int pivot=arr[end];
    int i=start-1; //this will initialize index of the smaller elements than the pivot
    
    for(int j=start;j<end;j++){ //not <=end as end itself is the pivot
        if(arr[j]<=pivot){ //swap the current element if it is smaller than pivot
            i++; //i became 0
            swap(&arr[i],&arr[j]); //now the smaller element is in index 0
        }
    }
    
    swap(&arr[i+1],&arr[end]); //now i+1 will have the pivot 
    //from 0 to i (smaller than pivot) , i+1=pivot and later from that are greater elements
    
    return i+1; //returning the partition index
}
void quicksort(int arr[],int start,int end){
    if(start<end){ //When all subarrays reduce to either 0 or 1 element, the base case is reached, and the recursion terminates. The entire array is then sorted. 
    int p=partition(arr,start,end);
    quicksort(arr,start,p-1); //sorting elements before partition, as partition is in its place sorted and before that are greater elements and after that are lower ones
    quicksort(arr,p+1,end); //sorting elements after partition
    }
}
int main(){
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter the array elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    quicksort(arr, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
}


//PROBLEM 10. Maximum-sum subarray [Ref]
#include<iostream>
#include<vector>
#include<climits>
using namespace std;
int max_sum_subarray(int arr[],int start,int end,int &sub_start,int &sub_end){
    if(start==end){
        sub_start=start; //sub_start=0
        sub_end=end; //sub_end=n-1
        return arr[start]; //in one element it is the max sum
    }
    int mid=(start+end)/2;
    
    int left_start,left_end,right_start,right_end;
    
    int left_sum=max_sum_subarray(arr,start,mid,left_start,left_end);
    
    int right_sum=max_sum_subarray(arr,mid+1,end,right_start,right_end);
    
    int left_cross_sum=INT_MIN;
    int right_cross_sum=INT_MIN;
    int temp_sum=0;
    int cross_start=mid; //from mid cross will start from mid to 0
    
    //from mid to start
    for(int i=mid;i>=start;--i){
        temp_sum+=arr[i];
        if(temp_sum>left_cross_sum){
            left_cross_sum=temp_sum;
            cross_start=i;
        }
    }
    
    temp_sum=0;
    int cross_end=mid+1; 
    
    //from mid+1 to end
    for(int j=mid+1;j<=end;j++){
        temp_sum+=arr[j];
        if(temp_sum>right_cross_sum){
            right_cross_sum=temp_sum;
            cross_end=j;
        }
    }
    
    int cross_sum=left_cross_sum+right_cross_sum;
    //left bigger
    if(left_sum>=right_sum && left_sum>=cross_sum){
        sub_start=left_start;
        sub_end=left_end;
        return left_sum;
    }
    //right bigger
    if (right_sum >= left_sum && right_sum >= cross_sum) {
        sub_start = right_start;
        sub_end = right_end;
        return right_sum;
    }
    //cross bigger
    sub_start = cross_start;
    sub_end = cross_end;
    return cross_sum;
}
int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter the array elements: ";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    
    int subarray_start, subarray_end;
    int max_sum = max_sum_subarray(arr, 0, n - 1, subarray_start, subarray_end);
    
    cout << "Maximum sum subarray: ";
    for (int i = subarray_start; i <= subarray_end; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
    cout << "Sum: " << max_sum << endl;

    return 0;
}


//PROBLEM 11. Longest common prefix of n strings
Write a program that takes N strings from the user and finds the longest common prefix of those strings
using divide and conquer.
sample input sample output
3
Algolab
Algorithms
Algeria
Alg
4
Algolab
Algorithms
Algeria
UIU
No common prefix


//LCP
#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function to find the common prefix between two strings
string common_prefix(const string& str1, const string& str2) {
    int min_len = min(str1.size(), str2.size());
    int i = 0;
    while (i < min_len && str1[i] == str2[i]) {
        i++;
    }
    return str1.substr(0, i);
}

// Function to find the longest common prefix in a range of strings
string find_lcp(const vector<string>& strings, int left, int right) {
    if (left == right) {
        return strings[left];
    }
    if (left < right) {
        int mid = left + (right - left) / 2;
        string lcp_left = find_lcp(strings, left, mid);
        string lcp_right = find_lcp(strings, mid + 1, right);
        return common_prefix(lcp_left, lcp_right);
    }
    return ""; // Should never reach here if inputs are valid
}

int main() {
    int n;
    cout << "Enter the number of strings: ";
    cin >> n;
    cin.ignore(); // To ignore the newline character after entering n

    vector<string> strings(n);
    cout << "Enter the strings:" << endl;
    for (int i = 0; i < n; i++) {
        getline(cin, strings[i]);
    }

    string lcp = find_lcp(strings, 0, n - 1);

    if (lcp.empty()) {
        cout << "No common prefix" << endl;
    } else {
        cout << "Longest common prefix: " << lcp << endl;
    }

    return 0;
}
