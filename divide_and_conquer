PROBLEM 01.
Write a function print_odd using divide-and-conquer algorithm to print the odd numbers of an array of n integers.
#include<iostream>
using namespace std;
int print_odd(int arr[],int start,int end){
    if(start==end){ //same index of start and end means one element
    if(arr[start]%2!=0) return 1; //if that one element is odd return 1
    else return 0;
    }
    else{
        int mid=(start+end)/2; //we will keep dividing until we reach to one element
        int c1=print_odd(arr,start,mid); //left part
        int c2=print_odd(arr,mid+1,end); //right part
        return c1+c2; //combined part
    }
}
int main(){
    int n;
    cout<<"Enter a number:";
    cin>>n;
    int arr[n];
    cout<<"Enter the number of the elements:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int c=print_odd(arr,0,n-1);
    cout<<"Odd count:"<<c<<endl;
}


PROBLEM 02.
Write a function calc_sum using divide-and-conquer algorithm to calculate the sum of an array of n integers. 
int calc_sum(int arr[],int start,int end){
    if(start==end){ //same index of start and end means one element
    return arr[start]; //just keep repeating one element to the other by returning
    }


PROBLEM 03.
Write a function calc_sum using divide-and-conquer algorithm to calculate the sum of the even numbers of an array of n integers. 
int calc_sum(int arr[],int start,int end){
    if(start==end){ //same index of start and end means one element
    if(arr[start]%2==0) return arr[start]; //until one element is left, if the element is even,return that element
    else return 0;
    }


PROBLEM 04. X^Y
Write a program that takes X and Y as input and calculates the value of X^Y using divide and conquer and prints it.
sample input   sample output
3 7            2187
#include<iostream>
using namespace std;
int power(int a,int b){
    if (b==0) return 1; //3^0=1
    if(b==1) return a; //3^1=3
    else{
        int p=power(a,b/2); //if a=3,b=6 then power(3,3) as 6/2=3
        if(b%2==0) return p*p; //if 6 is even return 3^3*3^3
        else return p*p*a; 
    }
    /*how it works:
    3^25 = 3^12 x 3^12 x 3 (25/2=12.5)
    3^12 = 3^6 x 3^6
    3^6 = 3^3 x 3^3
    3^3 = 3^1 x 3^1 x 3
    3^1= 3^0 x 3^0 x 3
    */
}
int main(){
    int a,b;
    cout<<"Enter a and b:";
    cin>>a>>b;
    int p=power(a,b);
    cout<<a<<" ^ "<<b<<" is:"<<p;
}


//PROBLEM 05. Find the max and min element of an array.
#include<iostream>
#include<cmath>
using namespace std;
struct Pair{
    int maximum,minimum;
};
Pair max_min(int arr[],int start,int end){
    if(start==end) return {arr[start],arr[start]};
    //we return pair like this {}
    //as one element so it is both maximum and minimum
    else{
        int mid=(start+end)/2;
        Pair left=max_min(arr,start,mid); //left side max,min
        Pair right=max_min(arr,mid+1,end); //right side max,min
        int Max=max(left.maximum,right.maximum); //left max > right max? 
        int Min=min(left.minimum,right.minimum);
        return {Max,Min};
    }
}
int main(){
    int n;
    cout<<"Enter a number:";
    cin>>n;
    int arr[n];
    cout<<"Enter the number of the elements:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
   Pair m=max_min(arr,0,n-1);
   cout<<"max:"<<m.maximum<<" min:"<<m.minimum;
}

//PROBLEM 06. Binary Search
Write a function binary_search that finds the index of an element X in a sorted (ascending) array A of N
integers using divide and conquer. If the element X is not present in the array, return -1. 
#include<iostream>
#include<cmath>
using namespace std;
int binary_search(int arr[],int start,int end,int key){
    while(start<=end){
        int mid=(start+end)/2;
        if(arr[mid]==key) return mid;
        else if(arr[mid]>key){
            return binary_search(arr,start,mid-1,key); //dont forget to return the answer
        }
        else{
            return binary_search(arr,mid+1,end,key);
        }
    }
    return -1;
}
int main(){
    int n;
    cout<<"Enter a number:";
    cin>>n;
    int arr[n];
    cout<<"Enter the number of the elements:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"Enter the number you want to search:";
    int k;
    cin>>k;
    int index=binary_search(arr,0,n-1,k);
    if(index==-1) cout<<"Index isnt found";
    else cout<<index;
}


PROBLEM 07. Merge sort
Write a function merge_sort that sorts an array of N numbers in descending order using merge sort.
Write a main that takes N numbers as input from users into an array, sorts the array in descending order
using the function merge_sort, and prints the sorted array.
