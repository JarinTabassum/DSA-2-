PROBLEM 01. Fractional knapsack
The weights and values of n items are given. The items are such that you can take a whole item or some
fraction of it (divisible). You have a knapsack to carry those items, whose weight capacity is W. Due to
the capacity limit of the knapsack, it might not be possible to carry all the items at once. In that case,
pick items such that the profit (total values of the taken items) is maximized.
Write a program that takes the weights and values of n items, and the capacity W of the knapsack from
the user and then finds the items which would maximize the profit using a greedy algorithm.

sample input
4 (number of items)
4 20  (weight and value)                                       
3 9
2 12
1 7
5 (maximum wieght)                   sample output
                                     item 4: 1.0 kg 7.0 taka
                                     item 3: 2.0 kg 12.0 taka
                                     item 1: 2.0 kg 10.0 taka
                                     profit: 29 taka


#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
struct Item{ //structure is how we gonna store the items in the vector
    int id;
    int weight;
    int value;
};
bool compare(Item a,Item b){ //the customized compare function
    double r1=(double)a.value/a.weight; //value per weight as value and weight is in integer, so making it double
    double r2=(double)b.value/b.weight;
    return r1>r2; //we will be returning the data in descending order 
}
double fractional_knapsack(int W,vector<Item>& items){
    sort(items.begin(),items.end(),compare); //then we called the sort function which will compare from beginning to end accroding to the custom compare function
    int cap_left=W; //at first the meximum amount will be the amount of the left capacity as nothing has been added yet
    double profit=0.0;
    for(int i=0;i<items.size();i++){ //from starting to the end of the vector items size
        if(cap_left<=0) break; //if there is no capacity left then break
            int wi=items[i].weight; //the highest ratio items weight according to the descending sorting and eventually the others
            int vi=items[i].value; 
            double fraction=min(1.0,(double)cap_left/wi); //as here we can take a whole item or some fraction of it, so the max limit will be 1
            cap_left-=fraction*wi; //multiplying the amount (0 to 1) to the actual weight to know how much of the particular item has been taken and then subtracting it to know how much is left
            profit+=fraction*vi;
            if(fraction>0){
                cout<<"Item number "<<items[i].id<<": "<<" weight: "<<fraction*wi<<" profit: "<<fraction*vi<<endl; 
        }
    }
    return profit; //will be returning the highest profit made by the algortihm
}
int main(){
    int n,W;
    cout<<"Enter the number of items:"<<endl;
    cin>>n;
    vector<Item> items(n);
    for(int i=0;i<n;i++){
        items[i].id=i+1; //so that every item can have a unique identifier id starting from 1
        cout<<"Enter weight and value:";
        cin>>items[i].weight>>items[i].value;
    }
    cout<<"Enter the maximum capacity:";
    cin>>W;
    double d=fractional_knapsack(W,items); //as parameter we will be passing the maximum ammount and the vector of items
    cout<<"Profit:"<<d;
}



//Problem 2
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
struct Item{ //structure for the vector
    string name;
    double weight;
    double value;
    double value_per_kg; 
};
bool compare(Item a,Item b){ //compare function in descending order
    return a.value_per_kg>b.value_per_kg;
}
int fractional_knapsack(vector<Item>& items,vector<double>& capacities){
    
    sort(items.begin(),items.end(),compare); //sorting the items in descending order according to their value per weight
    bool all_the_items_are_taken=false; //at first no items were stolen
    int total_thieves=0; //at first we had 0 thieves
    
    for(int i=0;i<capacities.size();i++){ //the amount of thieves the amount of capapcities size
        double profit=0.0;
        double capacity=capacities[i]; //iteratively picking capacity of each thief one after the other
        cout<<"Thief "<<i+1<<":"; //0+1=1
        
        for(auto& item:items){ //iteratively going through each item in the sorted items vector
        if(item.weight>0){ //if there is weight remaining to the item then
            if(item.weight<=capacity){ //if the weight is less or equal to the capacity then take all of it
                cout<<"Taking the item "<<item.name<<": "<<" weight: "<<item.weight<<"kg  value: "<<item.value<<" taka "<<endl;
                capacity-=item.weight; //deducting thief's remaining capacity by the weight he took
                profit+=item.value; //adding the items value to profit as full of it was taken
                item.weight=0; //as it was less than capacity and all of it was taken so no weight is remaining to that item
            }
            else{ //if the item's weight is greater than capacity
                double taken_weight=capacity; //whicever capacity is left we will take that much amount of the itme
                double taken_value=taken_weight*item.value_per_kg; //value per kg multiply to how much we took as we didnt take the entire item
                cout<<"Taking the item "<<item.name<<": "<<" weight: "<<taken_weight<<" kg " <<" value:" <<taken_value<<"taka "<<endl;
                item.weight-=taken_weight; //item is still remaining but we took the remaining capapcity amount,so have to deduct that
                item.value-=taken_value; //decreases the remaining value as we took part of it
                profit+=taken_value;
                capacity=0; //as we filled the capacity with this item,so no capacity is left,knapsack is full
            }
            if(capacity==0){
                break; //knapsack full,get out
            }
        }
    }
    cout<<"Thief "<<i+1<<" profit:"<<profit<<" taka"<<endl<<endl; //prints the total profit gained by the current thief
    bool all_items_are_taken=true; //lets assume now all the items are taken by the thief
    for(auto& item:items){
        if(item.weight>0){ //lets iterate through each item,if any of its weight is left, then obviously not all item has been taken
            all_items_are_taken=false;
            break; //will go to the !all_the_items_are_taken part
        }
    }
    if(all_items_are_taken){ //all the items are taken
        total_thieves=i+1; //as we started from 0 index
        break;
    }
  }
  if(!all_the_items_are_taken){ //not all the items are taken
      total_thieves=capacities.size(); //all the thieves have come and completed their knapsack but still there are some item left
  }
  return total_thieves;
}
int main(){
    int n,k;
    cout<<"Enter the number of items:";
    cin>>n;
    vector<Item> items(n);
    for(int i=0;i<n;i++){
        cout<<"Enter the name,weight and value:";
        cin>>items[i].name>>items[i].value>>items[i].weight;
        items[i].value_per_kg=items[i].value/items[i].weight; //as we have taken this member in the structure of the vector, we have to initialize it
    }
    cout<<"Enter the number of thieves:";
    cin>>k;
    vector<double> capacities(k); //the number of thieves, the number of capacities
    for(int i=0;i<k;i++){
        cout<<"Enter capacity:";
        cin>>capacities[i];
    }
    int t=fractional_knapsack(items,capacities);
    cout<<"Total "<<t<<" number of thieves were needed"<<endl;
    for(const auto& item:items){
        if(item.weight>0){ //if there ares still some item left
            cout<<" Still there are left "<<item.name<<" "<<item.weight<<" kg "<<item.value<<" taka ";
        }
    }
}





